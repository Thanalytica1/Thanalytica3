# Thanalytica Error Fixing Agent Prompt

You are a senior TypeScript/React developer tasked with fixing critical errors in the Thanalytica health assessment application. Please systematically address ALL the following issues with production-ready fixes:

## üî¥ CRITICAL FIXES REQUIRED

### 1. Database Connection Safety
- Fix `server/db.ts`: Add comprehensive DATABASE_URL validation with helpful error messages
- Add connection retry logic and graceful degradation
- Validate database schema on startup

### 2. Firebase Configuration Validation  
- Fix `client/src/lib/firebase.ts`: Add runtime validation for all Firebase environment variables
- Create fallback configuration for development
- Add proper error handling for Firebase initialization failures

### 3. Type Safety in Database Queries
- Fix `server/storage.ts`: Replace all `parseInt(x as string)` with safe number conversion
- Add proper type guards for database query results
- Use `Number()` with validation instead of type casting

### 4. Authentication Race Conditions
- Fix `client/src/hooks/use-auth.ts`: Add proper cleanup and prevent memory leaks
- Implement debouncing for rapid auth state changes
- Add loading states to prevent UI flashing

## ‚ö†Ô∏è HIGH PRIORITY FIXES

### 5. Network Error Handling
- Fix `client/src/lib/queryClient.ts`: Improve timeout error messages and retry logic
- Add exponential backoff for failed requests
- Implement proper loading states for long operations

### 6. Form Validation Edge Cases
- Fix `client/src/pages/assessment.tsx`: Add comprehensive input validation
- Prevent form submission with invalid data
- Add client-side validation before API calls

### 7. JSON Parsing Safety
- Fix localStorage JSON parsing with try-catch blocks
- Add data migration for old localStorage formats
- Validate parsed data structure before use

## üü° MEDIUM PRIORITY FIXES

### 8. Undefined Property Access
- Add null checks before accessing nested properties
- Use optional chaining (?.) consistently
- Provide sensible defaults for all data access

### 9. Array Safety
- Add empty array checks before using array methods
- Use defensive programming for array operations
- Handle edge cases in data processing functions

### 10. Component Error Boundaries
- Add specific error boundaries around risky components
- Implement fallback UI for common error scenarios
- Add error reporting for debugging

## üìã SPECIFIC IMPLEMENTATION REQUIREMENTS

**For each fix, ensure:**
- ‚úÖ TypeScript strict mode compliance
- ‚úÖ Proper error logging without exposing sensitive data  
- ‚úÖ User-friendly error messages
- ‚úÖ Graceful degradation when possible
- ‚úÖ No breaking changes to existing functionality
- ‚úÖ Consistent error handling patterns across the app

**Key files to focus on:**
1. `server/db.ts` - Database connection safety
2. `server/storage.ts` - Type safety in queries  
3. `client/src/lib/firebase.ts` - Firebase config validation
4. `client/src/lib/queryClient.ts` - Network error handling
5. `client/src/hooks/use-auth.ts` - Auth race conditions
6. `client/src/pages/assessment.tsx` - Form validation
7. `client/src/pages/dashboard.tsx` - Data access safety

**Add these new error handling utilities:**
- `utils/errorHandling.ts` - Centralized error handling functions
- `utils/validation.ts` - Input validation helpers
- `utils/typeGuards.ts` - Runtime type checking utilities

**Testing requirements:**
- Test error scenarios for each fix
- Verify graceful degradation works
- Ensure no console errors in browser
- Test with missing environment variables
- Verify form validation edge cases

**Priority order:**
1. Fix database and Firebase connection issues first (app-breaking)
2. Fix authentication and network errors (user experience)  
3. Fix form validation and data access (data integrity)
4. Add defensive programming patterns (robustness)

Please implement these fixes systematically, ensuring each change is tested and doesn't introduce new issues. Focus on production readiness and user experience.