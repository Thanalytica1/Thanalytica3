#!/usr/bin/env node

/**
 * Security Key Generation Script for Thanalytica
 * Generates cryptographically secure keys for production deployment
 */

const crypto = require('crypto');
const fs = require('fs');
const path = require('path');

console.log('üîê Thanalytica Security Key Generator');
console.log('=====================================\n');

// Generate secure keys
const encryptionKey = crypto.randomBytes(32).toString('hex');
const auditSalt = crypto.randomBytes(16).toString('hex');
const sessionSecret = crypto.randomBytes(32).toString('hex');
const healthCheckSecret = crypto.randomBytes(16).toString('hex');
const backupKey = crypto.randomBytes(32).toString('hex');

// Generate key ID with timestamp
const keyId = `production-v1-${new Date().getFullYear()}`;

console.log('‚úÖ Generated encryption keys:');
console.log(`ENCRYPTION_KEY=${encryptionKey}`);
console.log(`ENCRYPTION_KEY_ID=${keyId}`);
console.log(`AUDIT_HASH_SALT=${auditSalt}`);
console.log(`SESSION_SECRET=${sessionSecret}`);
console.log(`HEALTH_CHECK_SECRET=${healthCheckSecret}`);
console.log(`BACKUP_ENCRYPTION_KEY=${backupKey}`);

console.log('\n‚ö†Ô∏è  SECURITY WARNINGS:');
console.log('1. Store these keys securely (never commit to version control)');
console.log('2. Use a proper key management service in production');
console.log('3. Rotate keys every 90 days');
console.log('4. Keep historical keys for data decryption');

// Create secure .env file if it doesn't exist
const envPath = path.join(process.cwd(), '.env');
if (!fs.existsSync(envPath)) {
  const envTemplate = `# Generated by Thanalytica Security Key Generator
# ${new Date().toISOString()}

# CRITICAL: Never commit this file to version control
# Store these keys in your production key management service

ENCRYPTION_KEY=${encryptionKey}
ENCRYPTION_KEY_ID=${keyId}
AUDIT_HASH_SALT=${auditSalt}
SESSION_SECRET=${sessionSecret}
HEALTH_CHECK_SECRET=${healthCheckSecret}
BACKUP_ENCRYPTION_KEY=${backupKey}

# TODO: Fill in the remaining environment variables from .env.template
NODE_ENV=production
PORT=8080
`;

  fs.writeFileSync(envPath, envTemplate, { mode: 0o600 }); // Restrict file permissions
  console.log(`\n‚úÖ Created .env file with secure permissions`);
} else {
  console.log('\n‚ö†Ô∏è  .env file already exists. Please update manually.');
}

console.log('\nüìã Next Steps:');
console.log('1. Copy the keys to your secure key management service');
console.log('2. Complete the .env configuration using .env.template');
console.log('3. Test your security configuration');
console.log('4. Deploy with environment variables from your key management service');

console.log('\nüîÑ Key Rotation Schedule:');
console.log('- Encryption keys: Every 90 days');
console.log('- Session secrets: Every 30 days');
console.log('- Audit salts: Every 180 days');

console.log('\nüö® Security Reminder:');
console.log('These keys protect sensitive health data (PHI).');
console.log('Improper handling may result in HIPAA violations.');
console.log('Always follow your organization\'s security policies.');